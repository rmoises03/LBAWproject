openapi: 3.0.0

info:
  version: '1.0'
  title: 'LBAW NEWS4U Web API'
  description: 'Web Resources Specification (A7) for NEWS4U'

servers:
- url: http://lbaw2382.fe.up.pt
  description: Production server

externalDocs:
  description: Find more info here.
  url: https://git.fe.up.pt/lbaw/lbaw2324/lbaw2382/-/wikis/EAP

tags:
  - name: 'M01: Authentication and Individual Profile'
  - name: 'M02: Posts'
  - name: 'M03: Socials'
  - name: 'M04: User Administration and Static pages'

paths:

  /login:
    get:
      operationId: R101
      summary: 'R101: Login Form'
      description: 'Provide login form. Access: PUB'
      tags:
        - 'M01: Authentication and Individual Profile'
      responses:
        '200':
          description: 'Ok. Show log-in UI'

    post:
      operationId: R102
      summary: 'R102: Login Action'
      description: 'Processes the login form submission. Access: PUB'
      tags:
        - 'M01: Authentication and Individual Profile'

      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:       # <!--- form field name
                  type: string
                password:    # <!--- form field name
                  type: string
              required:
                - email
                - password

      responses:
        '302':
          description: 'Redirect after processing the login credentials.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful authentication. Redirect to user profile.'
                  value: '/users/{id}'
                302Error:
                  description: 'Failed authentication. Redirect to login form.'
                  value: '/login'

  /logout:

    post:
      operationId: R103
      summary: 'R103: Logout Action'
      description: 'Logout the current authenticated used. Access: USR, ADM'
      tags:
        - 'M01: Authentication and Individual Profile'

      responses:
        '302':
          description: 'Redirect after processing logout.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful logout. Redirect to login form.'
                  value: '/login'

  /register:
    get:
      operationId: R104
      summary: 'R104: Register Form'
      description: 'Provide new user registration form. Access: PUB'
      tags:
        - 'M01: Authentication and Individual Profile'
      responses:
        '200':
          description: 'Ok. Show sign-up UI'

    post:
      operationId: R105
      summary: 'R105: Register Action'
      description: 'Processes the new user registration form submission. Access: PUB'
      tags:
        - 'M01: Authentication and Individual Profile'

      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 250
                username:
                  type: string
                  maxLength: 250
                email:
                  type: string
                  maxLength: 250
                  format: email
                password:
                  type: string
                  minimum: 8
                  format: password
                confirm_password:
                  type: string
                  minimum: 8
                  format: password
              required:
                - name
                - username
                - email
                - password
                - confirm_password

      responses:
        '302':
          description: 'Redirect after processing the new user information.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful authentication. Redirect to user profile.'
                  value: '/users/{id}'
                302Failure:
                  description: 'Failed authentication. Redirect to login form.'
                  value: '/login'

  /users/{id}:
    get:
      operationId: R106
      summary: 'R106: View user profile'
      description: 'Show the individual user profile. Access: USR'
      tags:
        - 'M01: Authentication and Individual Profile'

      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true

      responses:
        '200':
          description: 'Ok. Show view profile UI'

  /api/posts:
    get:
      operationId: R201
      summary: 'R201: Search Posts API'
      description: 'Searches for posts and returns the results as JSON. Access: PUB.'

      tags:
        - 'M02: Posts'

      parameters:
        - in: query
          name: query
          description: String to use for full-text search
          schema:
            type: string
          required: false
        - in: query
          name: item
          description: Category of the works
          schema:
            type: string
          required: false
        - in: query
          name: loaned
          description: Boolean with the loaned flag value
          schema:
            type: boolean
          required: false
        - in: query
          name: owner
          description: Boolean with the owner flag value
          schema:
            type: boolean
          required: false
        - in: query
          name: classification
          description: Integer corresponding to the work classification
          schema:
            type: integer
          required: false

      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    title:
                      type: string
                    obs:
                      type: string
                    date:
                      type: string
                    owner:
                      type: string
                    tag:
                      type: string
                example:
                  - id: 1
                    title: Ronaldo chega aos 1000 golos
                    obs: ujwkfehf...
                    date: 2025
                    owner: Joana Lima
                    tag: Desporto
                  - id: 15
                    title: Mr. Bean
                    obs: trdyjcghk...
                    date: 1995
                    owner: Manuel Teixeira
                    tag: Filmes

    post:
      operationId: R202
      summary: 'R202: Create Post API'
      description: 'Creates a new post. Access: AUTH.'

      tags:
        - 'M02: Posts'

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'The title of the post.'
                obs:
                  type: string
                  description: 'Observations or additional information about the post.'
                date:
                  type: string
                  format: date
                  pattern: "DD-MM-YYYY"
                  description: 'The date associated with the post.'
                owner:
                  type: string
                  description: 'The owner of the post.'
                tag:
                  type: string
                  description: 'The tag of the post (e.g., Desporto, Filmes...).'

            examples:
              example1:
                value:
                  title: 'New Music Album'
                  obs: 'Amazing music collection.'
                  date: '2023'
                  owner: 'John Doe'
                  type: 'Música'

      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  message:
                    type: string

  /api/posts/{postid}: 
    get:
      operationId: R203
      summary: 'R203: Get Post Details API'
      description: 'Retrieves details about a specific post. Access: PUB.'

      tags:
        - 'M02: Posts'

      parameters:
        - in: path
          name: postid
          description: 'ID of the post to retrieve details.'
          required: true
          schema:
            type: integer
            format: int64

      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  title:
                    type: string
                  obs:
                    type: string
                  date:
                    type: string
                  owner:
                    type: string
                  tag:
                    type: string
              example:
                id: 1
                title: 'Rihanna - Unapologetic'
                obs: 'Good pop music album.'
                date: '2012'
                owner: 'Joana Lima'
                tag: 'Música'

    put:
      operationId: R204
      summary: 'R204: Update Post API'
      description: 'Updates an existing post. Access: AUTH.'

      tags:
        - 'M02: Posts'

      parameters:
        - in: path
          name: postid
          description: 'ID of the post to update.'
          required: true
          schema:
            type: integer
            format: int64

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'The updated title of the post.'
                obs:
                  type: string
                  description: 'Updated observations or additional information about the post.'
                date:
                  type: string
                  description: 'The updated date associated with the post.'
                owner:
                  type: string
                  description: 'The updated owner of the post.'
                tag:
                  type: string
                  description: 'The updated type of the post (e.g., Desporto, Filmes).'

            examples:
              example1:
                value:
                  title: 'Updated Music Album'
                  obs: 'Even more amazing music collection.'
                  date: '2023'
                  owner: 'John Doe'
                  type: 'Música'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 'Update successful message.'

    delete:
      operationId: R205
      summary: 'R205: Delete Post API'
      description: 'Deletes a post. Access: AUTH.'

      tags:
        - 'M02: Posts'

      parameters:
        - in: path
          name: postid
          description: 'ID of the post to delete.'
          required: true
          schema:
            type: integer
            format: int64

      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 'Deletion successful message.'
      

  /socials/friends/{userId}:
    get:
      tags:
       - 'M03: Socials'
      summary: Get a list of user's friends
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example: |
                {
                  "friends": [
                    {
                      "id": 1,
                      "name": "John Doe"
                    },
                    {
                      "id": 2,
                      "name": "Jane Smith"
                    }
                  ]
                }
    post:
      tags:
       - 'M03: Socials'
      summary: Add a new friend
      requestBody:
        description: Friend object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string

      responses:
        '201':
          description: Friend created successfully
    put:
      tags:
       - 'M03: Socials'
      summary: Update an existing friend
      parameters:
        - name: friendId
          in: path
          required: true
          description: ID of the friend to update
          schema:
            type: integer
      requestBody:
        description: Updated friend object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: Friend updated successfully
    delete:
      tags:
       - 'M03: Socials'
      summary: Remove a friend
      parameters:
        - name: friendId
          in: path
          required: true
          description: ID of the friend to remove
          schema:
            type: integer
      responses:
        '204':
          description: Friend removed successfully

  /socials/followers/{userId}:
    get:
      tags:
        - 'M03: Socials'
      summary: Get followers of a user by ID
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example: |
                {
                  "followers": [
                    {
                      "followerId": 1,
                      "username": "JohnDoe"
                    },
                    {
                      "followerId": 2,
                      "username": "JaneSmith"
                    }
                  ]
                }
        '404':
          description: User not found
        '500':
          description: Internal server error

    post:
      tags:
        - 'M03: Socials'
      summary: Add a new follower
      requestBody:
        description: Follower object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string

      responses:
        '201':
          description: Follower added successfully

    put:
      tags:
       - 'M03: Socials'
      summary: Update an existing follower
      parameters:
        - name: followerId
          in: path
          required: true
          description: ID of the follower to update
          schema:
            type: integer
      requestBody:
        description: Updated follower object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: Follower updated successfully

    delete:
      tags:
        - 'M03: Socials'
      summary: Remove a follower
      parameters:
        - name: followerId
          in: path
          required: true
          description: ID of the follower to remove
          schema:
            type: integer
      responses:
        '204':
          description: Follower removed successfully

  /socials/following/{userId}:
    get:
      tags:
        - 'M03: Socials'
      summary: Get people followed by a user by ID
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example: |
                {
                  "following": [
                    {
                      "userId": 1,
                      "username": "JohnDoe"
                    },
                    {
                      "userId": 2,
                      "username": "JaneSmith"
                    }
                  ]
                }
        '404':
          description: User not found
        '500':
          description: Internal server error

    post:
      tags:
        - 'M03: Socials'
      summary: Add a new following
      requestBody:
        description: Following object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string

      responses:
        '201':
          description: Following added successfully

    put:
      tags:
        - 'M03: Socials'
      summary: Update an existing following
      parameters:
        - name: followingId
          in: path
          required: true
          description: ID of the following to update
          schema:
            type: integer
      requestBody:
        description: Updated following object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
      responses:
        '200':
          description: Following updated successfully

    delete:
      tags:
        - 'M03: Socials'
      summary: Unfollow a user
      parameters:
        - name: followingId
          in: path
          required: true
          description: ID of the user to unfollow
          schema:
            type: integer
      responses:
        '204':
          description: Unfollowed successfully
 

  /socials/reputation/{userId}:
    get:
      tags:
        - 'M03: Socials'
      summary: Get reputation/score of a user by ID
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example: |
                {
                  "userId": 1,
                  "username": "JohnDoe",
                  "reputation": 75
                }
        '404':
          description: User not found
        '500':
          description: Internal server error


  /admin/users/:
    get:
      operationId: R401
      summary: 'R401: List Users'
      description: 'List all users.'
      tags:
        - 'M04: User Administration and Static pages'

      responses:
        '200':
          description: 'Ok. Users retrieved.'
        '404':
          description: 'Error! Users not found.'
  
  

  /admin/users/create:
   post:
    operationId: R401
    summary: 'R401: Create User'
    description: 'Creates a new user.'
    tags:
      - 'M04: User Administration and Static pages'
    requestBody:
       required: true
       content:
         application/x-www-form-urlencoded:
           schema:
            type: object
            properties:
              username:
                type: string
              email:
                type: string
              password:
                type: string
              name:
                type: string
            required:
              - username
              - name
              - email
              - password
    responses:
       '302':
         description: 'Redirect after processing the new user information.'
         headers:
           Location:
             schema:
               type: string
             examples:
               302Success:
                 description: 'Created user successfuly. Redirect to user profile.'
                 value: '/admin/users/{id}'
               302Failure:
                 description: 'Fail while creating user. Redirect to users page.'
                 value: '/admin/users/'



  /admin/users/{id}:
    get:
      operationId: R402
      summary: 'R402: View User Information'
      description: 'Show the individual user profile.'
      tags:
        - 'M04: User Administration and Static pages'

      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true

      responses:
        '200':
          description: 'Ok. User information retrieved.'
        '404':
          description: 'Error! User not found.'

  
  /admin/users/block/{id}:
    post:
      operationId: R403
      summary: 'R403: Block User'
      description: 'Blocks an individual user.'
      tags:
        - 'M04: User Administration and Static pages'

      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true

      responses:
        '204':
          description: 'Ok. User blocked.'
        '400':
          description: 'Bad Request. User already blocked.'
        '404':
          description: 'Bad Request. User not found.'

  /admin/users/unblock/{id}:
    post:
      operationId: R404
      summary: 'R404: Unblock User'
      description: 'Unblocks an individual user.'
      tags:
        - 'M04: User Administration and Static pages'

      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true

      responses:
        '204':
          description: 'Ok. User unblocked.'
        '400':
          description: 'Bad Request. User already unblocked.'
        '404':
          description: 'Bad Request. User not found.'

  /admin/users/delete/{id}:
    get:
      operationId: R405
      summary: 'R405: Delete User'
      description: 'Deletes an individual user.'
      tags:
        - 'M04: User Administration and Static pages'

      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true

      responses:
        '204':
          description: 'Ok. User deleted.'
        '404':
          description: 'Bad Request. User not found.'

  /admin/posts/delete/{id}:
    get:
      operationId: R406
      summary: 'R406: Delete Post'
      description: 'Deletes an individual post.'
      tags:
        - 'M04: User Administration and Static pages'

      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true

      responses:
        '204':
          description: 'Ok. Post deleted.'
        '404':
          description: 'Bad Request. Post not found.'

  /admin/posts/edit/{id}:
    get:
      operationId: R407
      summary: 'R407: Edit Post'
      description: 'Edits an individual post.'
      tags:
        - 'M04: User Administration and Static pages'
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
       required: false
       content:
         application/x-www-form-urlencoded:
           schema:
            type: object
            properties:
              post_title:
                type: string
              post_content:
                type: string

      responses:
        '200':
          description: 'Ok. Post edited.'
        '404':
          description: 'Bad Request. Post not found.'

  /admin/posts/{post_id}/comments/delete/{comment_id}:
    get:
      operationId: R408
      summary: 'R408: Delete Comment'
      description: 'Deletes a comment in an individual post.'
      tags:
        - 'M04: User Administration and Static pages'

      parameters:
        - in: path
          name: post_id
          schema:
            type: integer
          required: true
        - in: path
          name: comment_id
          schema:
            type: integer
          required: true

      responses:
        '204':
          description: 'Ok. Comment deleted.'
        '404':
          description: 'Bad Request. Comment not found.'

  /admin/posts/{post_id}/comments/edit/{comment_id}:
    post:
      operationId: R409
      summary: 'R409: Edit Comment'
      description: 'Edits an individual comment.'
      tags:
        - 'M04: User Administration and Static pages'
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
       required: true
       content:
         application/x-www-form-urlencoded:
           schema:
            type: object
            properties:
              comment:
                type: string
            required:
              - comment

      responses:
        '200':
          description: 'Ok. Comment edited.'
        '404':
          description: 'Bad Request. Comment not found.'

 